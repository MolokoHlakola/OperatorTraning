/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-04-28 11:37:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.synoptic;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import javax.faces.context.*;
import javax.faces.application.*;
import javax.faces.el.*;
import org.sakaiproject.tool.messageforums.ui.*;

public final class wait_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("/WEB-INF/lib/javax.faces-2.3.9.jar", Long.valueOf(1650037364000L));
    _jspx_dependants.put("/WEB-INF/lib/jsf2-widgets-20.0.jar", Long.valueOf(1650037394000L));
    _jspx_dependants.put("jar:file:/Users/moloko/Desktop/tomcat/apache-tomcat-9.0.62/webapps/messageforums-tool/WEB-INF/lib/jsf2-widgets-20.0.jar!/META-INF/sakai-jsf2.tld", Long.valueOf(1650037392000L));
    _jspx_dependants.put("jar:file:/Users/moloko/Desktop/tomcat/apache-tomcat-9.0.62/webapps/messageforums-tool/WEB-INF/lib/javax.faces-2.3.9.jar!/META-INF/jsf_core.tld", Long.valueOf(1554187024000L));
    _jspx_dependants.put("jar:file:/Users/moloko/Desktop/tomcat/apache-tomcat-9.0.62/webapps/messageforums-tool/WEB-INF/lib/javax.faces-2.3.9.jar!/META-INF/html_basic.tld", Long.valueOf(1554187024000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.faces.el");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.faces.application");
    _jspx_imports_packages.add("org.sakaiproject.tool.messageforums.ui");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("javax.faces.context");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ff_005fview;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fsakai_005fview;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fh_005foutputText_0026_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fh_005finputHidden_0026_005fvalue_005fid_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ff_005fverbatim;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fh_005fgraphicImage_0026_005furl_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005ff_005fview = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fsakai_005fview = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fh_005foutputText_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fh_005finputHidden_0026_005fvalue_005fid_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005ff_005fverbatim = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fh_005fgraphicImage_0026_005furl_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005ff_005fview.release();
    _005fjspx_005ftagPool_005fsakai_005fview.release();
    _005fjspx_005ftagPool_005fh_005foutputText_0026_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fh_005finputHidden_0026_005fvalue_005fid_005fnobody.release();
    _005fjspx_005ftagPool_005ff_005fverbatim.release();
    _005fjspx_005ftagPool_005fh_005fgraphicImage_0026_005furl_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      org.sakaiproject.util.ResourceLoader msgs = null;
      synchronized (session) {
        msgs = (org.sakaiproject.util.ResourceLoader) _jspx_page_context.getAttribute("msgs", javax.servlet.jsp.PageContext.SESSION_SCOPE);
        if (msgs == null){
          msgs = new org.sakaiproject.util.ResourceLoader();
          _jspx_page_context.setAttribute("msgs", msgs, javax.servlet.jsp.PageContext.SESSION_SCOPE);
          out.write("\n");
          out.write("   ");
          org.apache.jasper.runtime.JspRuntimeLibrary.introspecthelper(_jspx_page_context.findAttribute("msgs"), "baseName", "org.sakaiproject.api.app.messagecenter.bundle.Messages", null, null, false);
          out.write('\n');
        }
      }
      out.write('\n');
      out.write('\n');

  	String thisId = request.getParameter("panel");
  	if (thisId == null) 
  	{
    	thisId = "Main" + org.sakaiproject.tool.cover.ToolManager.getCurrentPlacement().getId();
 	}

      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("\n");
      out.write("<head>\n");
      out.write("<script src=\"/library/js/headscripts.js\"></script>\n");
      out.write("<script src=\"js/frameAdjust.js\"></script>\n");
      out.write("<script>includeLatestJQuery(\"msgcntr\");</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script><!--\n");
      out.write("	/*\n");
      out.write("	 *	To use this, call this page with a GET parameter of \"url\"\n");
      out.write("	 *	with the urlencoded destination page that takes a while to load\n");
      out.write("	 *\n");
      out.write("	 */\n");
      out.write("	\n");
      out.write("	// intervalid - id of call to progress() every 1/2 sec.\n");
      out.write("	//				Put here so can clear on unload.\n");
      out.write("	// loading    - switch since load() done on body load\n");
      out.write("	//				and also within script (for Safari).\n");
      out.write("	var intervalid, index = 0;\n");
      out.write("	var notloading = true;\n");
      out.write("	var images = new Array(12);\n");
      out.write("	var imagesURI = new Array(12);\n");
      out.write("	\n");
      out.write("	function getEl(id) {\n");
      out.write("		if (document.getElementById) {\n");
      out.write("			return  document.getElementById(id);\n");
      out.write("		}\n");
      out.write("		else if (document.all) {\n");
      out.write("			return document.all[id];\n");
      out.write("		}\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	/*\n");
      out.write("	 * Determines if parameter is just a filename.\n");
      out.write("	 */\n");
      out.write("	 function isFilename(fn) {\n");
      out.write("	 	if (fn.substring(0,5) == 'http:' || \n");
      out.write("	 		fn.substring(0,6) == 'https:')\n");
      out.write("			return false;\n");
      out.write("		else\n");
      out.write("			return true;\n");
      out.write("	 }\n");
      out.write("	 	\n");
      out.write("	/*\n");
      out.write("	 * Determines the URL to redirect to. This is determined\n");
      out.write("	 * the a GET parameter named url.\n");
      out.write("	 *\n");
      out.write("	 * NOTES: To use method 3, site name must start with 'www'.\n");
      out.write("	 *\n");
      out.write("	 * Two methods:\n");
      out.write("	 * 1. another page within site (ex: url=main)\n");
      out.write("	 * 2. an entire url (ex: url=http://www.somesite.com)\n");
      out.write("	 */\n");
      out.write("	function load() {\n");
      out.write("\n");
      out.write("		if (notloading) {\n");
      out.write("			notloading = false;\n");
      out.write("		\n");
      out.write("\n");
      out.write("			setTimeout( function() {\n");
      out.write("				var urlEl = getEl(\"longPageLoad\");\n");
      out.write("				var url = urlEl.value;\n");
      out.write("\n");
      out.write("				// just page name, construct url from current href\n");
      out.write("				if (isFilename(url)) {\n");
      out.write("					var urlCurrent = window.location.href;\n");
      out.write("					var lastSlash = urlCurrent.lastIndexOf('/');\n");
      out.write("\n");
      out.write("					if (lastSlash > 0) {\n");
      out.write("						url = urlCurrent.substring(0, lastSlash) + '/' + url;\n");
      out.write("					}\n");
      out.write("					else {\n");
      out.write("					// what to do? what to do?\n");
      out.write("					}\n");
      out.write("\n");
      out.write("					// GET parameter added so other page will know it\n");
      out.write("					// was called by this wait page (and not from iframe)\n");
      out.write("					location.href = url + \"?time=1\";\n");
      out.write("				}\n");
      out.write("			}, 300);\n");
      out.write("\n");
      out.write("\n");
      out.write("			SynMainLite.setupTableParsers();\n");
      out.write("			SynMainLite.setupTableHeaders();\n");
      out.write("			SynMainLite.setupTableSortImageOffset();\n");
      out.write("			//hide all checkboxes that are used to reset original values\n");
      out.write("			$(\".unchangedValue\").hide();\n");
      out.write("			SynMainLite.toggleHiddenRows();\n");
      out.write("\n");
      out.write("		 	\n");
      out.write("		}\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	/*\n");
      out.write("	 * Turns off the refeshing of the wait screen\n");
      out.write("	 * when actual page being loaded.\n");
      out.write("	 */\n");
      out.write("	function unload() {\n");
      out.write("		// turn off animation when page finished\n");
      out.write("		window.clearInterval(intervalid);\n");
      out.write("		SynMainLite.setupTableParsers();\n");
      out.write("		SynMainLite.setupTableHeaders();\n");
      out.write("		SynMainLite.setupTableSortImageOffset();\n");
      out.write("		//hide all checkboxes that are used to reset original values\n");
      out.write("		$(\".unchangedValue\").hide();\n");
      out.write("		SynMainLite.toggleHiddenRows();\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	/*\n");
      out.write("	 * For FF browsers, animated gif freezes when href changed,\n");
      out.write("	 * so use AJAX to get redirected page.\n");
      out.write("	 *\n");
      out.write("	 */	\n");
      out.write("	function getActualFile()\n");
      out.write("	{\n");
      out.write("		var http;\n");
      out.write("		http = new XMLHttpRequest();\n");
      out.write("\n");
      out.write("		var urlEl = getEl(\"longPageLoad\");\n");
      out.write("		var url = urlEl.value;\n");
      out.write("\n");
      out.write("		// just page name, construct url from current href\n");
      out.write("		if (isFilename(url)) {\n");
      out.write("			var urlCurrent = window.location.href;\n");
      out.write("			var lastSlash = urlCurrent.lastIndexOf('/');\n");
      out.write("\n");
      out.write("			if (lastSlash > 0) {\n");
      out.write("				url = urlCurrent.substring(0, lastSlash) + '/' + url;\n");
      out.write("			}\n");
      out.write("			else {\n");
      out.write("				// what to do? what to do?\n");
      out.write("			}\n");
      out.write("		}\n");
      out.write("\n");
      out.write("		// GET parameter added so other page will know it\n");
      out.write("		// was called by this wait page (and not from iframe)\n");
      out.write("		http.open(\"GET\", url + \"?time=1\", true);\n");
      out.write("\n");
      out.write("		http.onreadystatechange = function()\n");
      out.write("		{\n");
      out.write("			if (http.readyState == 4) {\n");
      out.write("    			var response = http.responseText; \n");
      out.write("    			document.getElementById('result').innerHTML = response;\n");
      out.write("    			adjustMainFrameHeight(self.name);\n");
      out.write(" 	       }	 \n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		http.send(null);\n");
      out.write("	}\n");
      out.write("\n");
      out.write("// --></script>\n");
      out.write("</head>\n");
      out.write("\n");
      //  f:view
      com.sun.faces.taglib.jsf_core.ViewTag _jspx_th_f_005fview_005f0 = new com.sun.faces.taglib.jsf_core.ViewTag();
      _jsp_getInstanceManager().newInstance(_jspx_th_f_005fview_005f0);
      try {
        _jspx_th_f_005fview_005f0.setPageContext(_jspx_page_context);
        _jspx_th_f_005fview_005f0.setParent(null);
        _jspx_th_f_005fview_005f0.setJspId("jsp_1840271732_0");
        int _jspx_eval_f_005fview_005f0 = _jspx_th_f_005fview_005f0.doStartTag();
        if (_jspx_eval_f_005fview_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          if (_jspx_eval_f_005fview_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_f_005fview_005f0);
          }
          do {
            out.write('\n');
            out.write(' ');
            out.write(' ');
            //  sakai:view
            org.sakaiproject.jsf2.tag.ViewTag _jspx_th_sakai_005fview_005f0 = new org.sakaiproject.jsf2.tag.ViewTag();
            _jsp_getInstanceManager().newInstance(_jspx_th_sakai_005fview_005f0);
            try {
              _jspx_th_sakai_005fview_005f0.setPageContext(_jspx_page_context);
              _jspx_th_sakai_005fview_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_f_005fview_005f0);
              _jspx_th_sakai_005fview_005f0.setJspId("jsp_1840271732_1");
              int _jspx_eval_sakai_005fview_005f0 = _jspx_th_sakai_005fview_005f0.doStartTag();
              if (_jspx_eval_sakai_005fview_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
                if (_jspx_eval_sakai_005fview_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
                  out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_sakai_005fview_005f0);
                }
                do {
                  out.write("\n");
                  out.write("	  <script>includeWebjarLibrary('jquery.tablesorter');</script>\n");
                  out.write("	  <script src=\"/messageforums-tool/js/synopticLite.js\"></script>\n");
                  out.write("  	  <script src=\"/messageforums-tool/js/popupscripts.js\"></script>\n");
                  out.write("  	  <script>\n");
                  out.write("\n");
                  out.write("//this function (setupTableParsers) setting has to be in the jsp page b/c of the msgs.syn_no_messages string.\n");
                  out.write("var SynMainLite = SynMainLite || {};\n");
                  out.write("\n");
                  out.write("SynMainLite.setupTableHeaders = function (){\n");
                  out.write("	//since f:facet only allows one tag (no nested tags either) this will set up the hyperlink (only used to\n");
                  out.write("	//make the user realize they can click the headers for sorting) to have the correct text from the msgs variable\n");
                  out.write("	try{\n");
                  out.write("	$(\"#hideHeader\")[0].innerHTML = \"");
                  if (_jspx_meth_h_005foutputText_005f0(_jspx_th_sakai_005fview_005f0, _jspx_page_context))
                    return;
                  out.write("\";\n");
                  out.write("	$(\"#siteHeader\")[0].innerHTML = '");
                  if (_jspx_meth_h_005foutputText_005f1(_jspx_th_sakai_005fview_005f0, _jspx_page_context))
                    return;
                  out.write("';\n");
                  out.write("	$(\"#messagesHeader\")[0].innerHTML = '");
                  if (_jspx_meth_h_005foutputText_005f2(_jspx_th_sakai_005fview_005f0, _jspx_page_context))
                    return;
                  out.write("';\n");
                  out.write("	$(\"#forumsHeader\")[0].innerHTML = '");
                  if (_jspx_meth_h_005foutputText_005f3(_jspx_th_sakai_005fview_005f0, _jspx_page_context))
                    return;
                  out.write("';\n");
                  out.write("	$(\"#showOptions\")[0].innerHTML = '");
                  if (_jspx_meth_h_005foutputText_005f4(_jspx_th_sakai_005fview_005f0, _jspx_page_context))
                    return;
                  out.write("';\n");
                  out.write("	}catch(e){\n");
                  out.write("	}\n");
                  out.write("};\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("SynMainLite.setupTableParsers = function (){\n");
                  out.write("\n");
                  out.write("	 //add message count orderer\n");
                  out.write("	 $.tablesorter.addParser({\n");
                  out.write("	        id: 'newMessageCount',\n");
                  out.write("	        is: function(s) {\n");
                  out.write("	            return false;\n");
                  out.write("	        },\n");
                  out.write("	        format: function(s) {\n");
                  out.write("	            //this is used to parse out the number of messages from the html, or \n");
                  out.write("	            //convert 'none' to the number 0, so we can order numberically\n");
                  out.write("	            return s.toLowerCase().replace('");
                  if (_jspx_meth_h_005foutputText_005f5(_jspx_th_sakai_005fview_005f0, _jspx_page_context))
                    return;
                  out.write("',0).replace(new RegExp('</a>$'), '').replace(new RegExp('<a.*>'),'').replace(new RegExp('<img.*>'),'');           \n");
                  out.write("	        },\n");
                  out.write("	        type: \"numeric\"\n");
                  out.write("	    });  \n");
                  out.write("	 //add title sorter\n");
                  out.write("	    $.tablesorter.addParser({\n");
                  out.write("	        id: 'title',\n");
                  out.write("	        is: function(s) {\n");
                  out.write("	            return false;\n");
                  out.write("	        },\n");
                  out.write("	        format: function(s) {\n");
                  out.write("	            //this is used to parse out the number of messages from the html, or \n");
                  out.write("	            //convert 'none' to the number 0, so we can order numberically\n");
                  out.write("	            return s.toLowerCase().replace(new RegExp('</a>$'), '').replace(new RegExp('<a.*>'),'');           \n");
                  out.write("	        },\n");
                  out.write("	        type: \"text\"\n");
                  out.write("	    });\n");
                  out.write("	    \n");
                  out.write("	    //add checkbox sorter\n");
                  out.write("	    $.tablesorter.addParser({\n");
                  out.write("	        id: 'checkbox',\n");
                  out.write("	        is: function(s) {\n");
                  out.write("	            return false;\n");
                  out.write("	        },\n");
                  out.write("	        format: function(s) {\n");
                  out.write("	            var integer = 0;\n");
                  out.write("	            if (s.toLowerCase().match(/<input[^>]*checked*/i)) {\n");
                  out.write("	                integer = 1;\n");
                  out.write("	            }\n");
                  out.write("	            return integer;\n");
                  out.write("	        },\n");
                  out.write("	        type: \"numeric\"\n");
                  out.write("	    }); \n");
                  out.write("	    \n");
                  out.write("	    //apply orderers to workspaceTable\n");
                  out.write("	    $(\".workspaceTable\").tablesorter({ \n");
                  out.write("		    \n");
                  out.write("	        headers: {\n");
                  out.write("	    	0: { \n");
                  out.write("	    	    sorter:'checkbox' \n");
                  out.write("	    	},\n");
                  out.write("	    	1: { \n");
                  out.write("	 	       sorter:'title' \n");
                  out.write("	    	}, \n");
                  out.write("	    	2: { \n");
                  out.write("		        sorter:'newMessageCount' \n");
                  out.write("		    }, \n");
                  out.write("	        3: { \n");
                  out.write("	            sorter:'newMessageCount' \n");
                  out.write("	        } \n");
                  out.write("	        } \n");
                  out.write("	    });\n");
                  out.write("\n");
                  out.write("	};\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("\n");
                  out.write("	function resize(){\n");
                  out.write("		mySetMainFrameHeightViewCell('");
                  out.print( org.sakaiproject.util.Web.escapeJavascript(thisId));
                  out.write("');\n");
                  out.write("	}\n");
                  out.write("	\n");
                  out.write("	\n");
                  out.write("function mySetMainFrameHeightViewCell(id)\n");
                  out.write("{\n");
                  out.write("	// run the script only if this window's name matches the id parameter\n");
                  out.write("	// this tells us that the iframe in parent by the name of 'id' is the one who spawned us\n");
                  out.write("	if (typeof window.name != \"undefined\" && id != window.name) return;\n");
                  out.write("\n");
                  out.write("	var frame = parent.document.getElementById(id);\n");
                  out.write("	if (frame)\n");
                  out.write("	{\n");
                  out.write("\n");
                  out.write("		var objToResize = (frame.style) ? frame.style : frame;\n");
                  out.write("  \n");
                  out.write("    // SAK-11014 revert           if ( false ) {\n");
                  out.write("\n");
                  out.write("		var height; 		\n");
                  out.write("		var offsetH = document.body.offsetHeight;\n");
                  out.write("		var innerDocScrollH = null;\n");
                  out.write("\n");
                  out.write("		if (typeof(frame.contentDocument) != 'undefined' || typeof(frame.contentWindow) != 'undefined')\n");
                  out.write("		{\n");
                  out.write("			// very special way to get the height from IE on Windows!\n");
                  out.write("			// note that the above special way of testing for undefined variables is necessary for older browsers\n");
                  out.write("			// (IE 5.5 Mac) to not choke on the undefined variables.\n");
                  out.write(" 			var innerDoc = (frame.contentDocument) ? frame.contentDocument : frame.contentWindow.document;\n");
                  out.write("			innerDocScrollH = (innerDoc != null) ? innerDoc.body.scrollHeight : null;\n");
                  out.write("		}\n");
                  out.write("	\n");
                  out.write("		if (document.all && innerDocScrollH != null)\n");
                  out.write("		{\n");
                  out.write("			// IE on Windows only\n");
                  out.write("			height = innerDocScrollH;\n");
                  out.write("		}\n");
                  out.write("		else\n");
                  out.write("		{\n");
                  out.write("			// every other browser!\n");
                  out.write("			height = offsetH;\n");
                  out.write("		}\n");
                  out.write("   // SAK-11014 revert		} \n");
                  out.write("\n");
                  out.write("   // SAK-11014 revert             var height = getFrameHeight(frame);\n");
                  out.write("\n");
                  out.write("		// here we fudge to get a little bigger\n");
                  out.write("		var newHeight = height + 40;\n");
                  out.write("\n");
                  out.write("		// but not too big!\n");
                  out.write("		if (newHeight > 32760) newHeight = 32760;\n");
                  out.write("\n");
                  out.write("		// capture my current scroll position\n");
                  out.write("		var scroll = findScroll();\n");
                  out.write("\n");
                  out.write("		// resize parent frame (this resets the scroll as well)\n");
                  out.write("		objToResize.height=newHeight + \"px\";\n");
                  out.write("\n");
                  out.write("		// reset the scroll, unless it was y=0)\n");
                  out.write("		if (scroll[1] > 0)\n");
                  out.write("		{\n");
                  out.write("			var position = findPosition(frame);\n");
                  out.write("			parent.window.scrollTo(position[0]+scroll[0], position[1]+scroll[1]);\n");
                  out.write("		}\n");
                  out.write("	}\n");
                  out.write("}\n");
                  out.write("</script> \n");
                  out.write("  \n");
                  out.write("  	");
                  out.write("\n");
                  out.write("    ");
                  if (_jspx_meth_h_005finputHidden_005f0(_jspx_th_sakai_005fview_005f0, _jspx_page_context))
                    return;
                  out.write('\n');
                  out.write('\n');
                  out.write('	');
                  out.write('\n');
                  out.write('	');
                  if (_jspx_meth_f_005fverbatim_005f0(_jspx_th_sakai_005fview_005f0, _jspx_page_context))
                    return;
                  out.write('\n');
                  out.write('\n');
  
  /* if MyWorkspace, display wait gif and message. if not, just redirect to synMain. */
  FacesContext context = FacesContext.getCurrentInstance();
  Application app = context.getApplication();
  ValueBinding binding = app.createValueBinding("#{mfSynopticBeanLite}");
  MessageForumSynopticBeanLite mfsb = (MessageForumSynopticBeanLite) binding.getValue(context);
  
  if (mfsb.isMyWorkspace() && mfsb.isDisableMyWorkspace().booleanValue()){
	  if(mfsb.getDisableMyWorkspaceDisabledMessage() != null && !"".equals(mfsb.getDisableMyWorkspaceDisabledMessage())){

                  out.write("	  \n");
                  out.write("		");
                  if (_jspx_meth_h_005foutputText_005f6(_jspx_th_sakai_005fview_005f0, _jspx_page_context))
                    return;
                  out.write('\n');
	  
	  }else{

                  out.write('\n');
                  out.write('	');
                  out.write('	');
                  if (_jspx_meth_h_005foutputText_005f7(_jspx_th_sakai_005fview_005f0, _jspx_page_context))
                    return;
                  out.write("		  \n");

	  }
  }else if (mfsb.isMyWorkspace() && mfsb.isUserRequestSynoptic().booleanValue()){

                  out.write("\n");
                  out.write("<div>\n");
                  out.write("<br>\n");
                  if (_jspx_meth_h_005fgraphicImage_005f0(_jspx_th_sakai_005fview_005f0, _jspx_page_context))
                    return;
                  out.write("\n");
                  out.write("&nbsp;<a href=\"#\" onclick=\"load();\">");
                  if (_jspx_meth_h_005foutputText_005f8(_jspx_th_sakai_005fview_005f0, _jspx_page_context))
                    return;
                  out.write("</a>\n");
                  out.write("</div>\n");
 
	}else{

                  out.write("\n");
                  out.write("	\n");
                  out.write("	<script> \n");
                  out.write("	// Call javascript function to grab actual long loading page\n");
                  out.write("	load();\n");
                  out.write("	</script>\n");


   }

                  out.write('\n');
                  out.write(' ');
                  out.write(' ');
                  if (_jspx_meth_f_005fverbatim_005f1(_jspx_th_sakai_005fview_005f0, _jspx_page_context))
                    return;
                  out.write("\n");
                  out.write("\n");
                  out.write("  ");
                  int evalDoAfterBody = _jspx_th_sakai_005fview_005f0.doAfterBody();
                  if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
                    break;
                } while (true);
                if (_jspx_eval_sakai_005fview_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
                  out = _jspx_page_context.popBody();
                }
              }
              if (_jspx_th_sakai_005fview_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_sakai_005fview_005f0, _jsp_getInstanceManager(), false);
            }
            out.write('\n');
            int evalDoAfterBody = _jspx_th_f_005fview_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
          if (_jspx_eval_f_005fview_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = _jspx_page_context.popBody();
          }
        }
        if (_jspx_th_f_005fview_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_f_005fview_005f0, _jsp_getInstanceManager(), false);
      }
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</html>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_h_005foutputText_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_sakai_005fview_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  h:outputText
    com.sun.faces.taglib.html_basic.OutputTextTag _jspx_th_h_005foutputText_005f0 = new com.sun.faces.taglib.html_basic.OutputTextTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_h_005foutputText_005f0);
    try {
      _jspx_th_h_005foutputText_005f0.setPageContext(_jspx_page_context);
      _jspx_th_h_005foutputText_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_sakai_005fview_005f0);
      // /jsp/synoptic/wait.jsp(188,34) name = value type = javax.el.ValueExpression reqTime = false required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_h_005foutputText_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/jsp/synoptic/wait.jsp(188,34) '#{msgs.syn_hide}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"#{msgs.syn_hide}",java.lang.Object.class)));
      _jspx_th_h_005foutputText_005f0.setJspId("jsp_1840271732_2");
      int _jspx_eval_h_005foutputText_005f0 = _jspx_th_h_005foutputText_005f0.doStartTag();
      if (_jspx_th_h_005foutputText_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_h_005foutputText_005f0, _jsp_getInstanceManager(), false);
    }
    return false;
  }

  private boolean _jspx_meth_h_005foutputText_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_sakai_005fview_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  h:outputText
    com.sun.faces.taglib.html_basic.OutputTextTag _jspx_th_h_005foutputText_005f1 = new com.sun.faces.taglib.html_basic.OutputTextTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_h_005foutputText_005f1);
    try {
      _jspx_th_h_005foutputText_005f1.setPageContext(_jspx_page_context);
      _jspx_th_h_005foutputText_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_sakai_005fview_005f0);
      // /jsp/synoptic/wait.jsp(189,34) name = value type = javax.el.ValueExpression reqTime = false required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_h_005foutputText_005f1.setValue(new org.apache.jasper.el.JspValueExpression("/jsp/synoptic/wait.jsp(189,34) '#{msgs.syn_site_heading}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"#{msgs.syn_site_heading}",java.lang.Object.class)));
      _jspx_th_h_005foutputText_005f1.setJspId("jsp_1840271732_3");
      int _jspx_eval_h_005foutputText_005f1 = _jspx_th_h_005foutputText_005f1.doStartTag();
      if (_jspx_th_h_005foutputText_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_h_005foutputText_005f1, _jsp_getInstanceManager(), false);
    }
    return false;
  }

  private boolean _jspx_meth_h_005foutputText_005f2(javax.servlet.jsp.tagext.JspTag _jspx_th_sakai_005fview_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  h:outputText
    com.sun.faces.taglib.html_basic.OutputTextTag _jspx_th_h_005foutputText_005f2 = new com.sun.faces.taglib.html_basic.OutputTextTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_h_005foutputText_005f2);
    try {
      _jspx_th_h_005foutputText_005f2.setPageContext(_jspx_page_context);
      _jspx_th_h_005foutputText_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_sakai_005fview_005f0);
      // /jsp/synoptic/wait.jsp(190,38) name = value type = javax.el.ValueExpression reqTime = false required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_h_005foutputText_005f2.setValue(new org.apache.jasper.el.JspValueExpression("/jsp/synoptic/wait.jsp(190,38) '#{msgs.syn_private_heading}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"#{msgs.syn_private_heading}",java.lang.Object.class)));
      _jspx_th_h_005foutputText_005f2.setJspId("jsp_1840271732_4");
      int _jspx_eval_h_005foutputText_005f2 = _jspx_th_h_005foutputText_005f2.doStartTag();
      if (_jspx_th_h_005foutputText_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_h_005foutputText_005f2, _jsp_getInstanceManager(), false);
    }
    return false;
  }

  private boolean _jspx_meth_h_005foutputText_005f3(javax.servlet.jsp.tagext.JspTag _jspx_th_sakai_005fview_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  h:outputText
    com.sun.faces.taglib.html_basic.OutputTextTag _jspx_th_h_005foutputText_005f3 = new com.sun.faces.taglib.html_basic.OutputTextTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_h_005foutputText_005f3);
    try {
      _jspx_th_h_005foutputText_005f3.setPageContext(_jspx_page_context);
      _jspx_th_h_005foutputText_005f3.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_sakai_005fview_005f0);
      // /jsp/synoptic/wait.jsp(191,36) name = value type = javax.el.ValueExpression reqTime = false required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_h_005foutputText_005f3.setValue(new org.apache.jasper.el.JspValueExpression("/jsp/synoptic/wait.jsp(191,36) '#{msgs.syn_discussion_heading}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"#{msgs.syn_discussion_heading}",java.lang.Object.class)));
      _jspx_th_h_005foutputText_005f3.setJspId("jsp_1840271732_5");
      int _jspx_eval_h_005foutputText_005f3 = _jspx_th_h_005foutputText_005f3.doStartTag();
      if (_jspx_th_h_005foutputText_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_h_005foutputText_005f3, _jsp_getInstanceManager(), false);
    }
    return false;
  }

  private boolean _jspx_meth_h_005foutputText_005f4(javax.servlet.jsp.tagext.JspTag _jspx_th_sakai_005fview_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  h:outputText
    com.sun.faces.taglib.html_basic.OutputTextTag _jspx_th_h_005foutputText_005f4 = new com.sun.faces.taglib.html_basic.OutputTextTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_h_005foutputText_005f4);
    try {
      _jspx_th_h_005foutputText_005f4.setPageContext(_jspx_page_context);
      _jspx_th_h_005foutputText_005f4.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_sakai_005fview_005f0);
      // /jsp/synoptic/wait.jsp(192,35) name = value type = javax.el.ValueExpression reqTime = false required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_h_005foutputText_005f4.setValue(new org.apache.jasper.el.JspValueExpression("/jsp/synoptic/wait.jsp(192,35) '#{msgs.syn_options}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"#{msgs.syn_options}",java.lang.Object.class)));
      _jspx_th_h_005foutputText_005f4.setJspId("jsp_1840271732_6");
      int _jspx_eval_h_005foutputText_005f4 = _jspx_th_h_005foutputText_005f4.doStartTag();
      if (_jspx_th_h_005foutputText_005f4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_h_005foutputText_005f4, _jsp_getInstanceManager(), false);
    }
    return false;
  }

  private boolean _jspx_meth_h_005foutputText_005f5(javax.servlet.jsp.tagext.JspTag _jspx_th_sakai_005fview_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  h:outputText
    com.sun.faces.taglib.html_basic.OutputTextTag _jspx_th_h_005foutputText_005f5 = new com.sun.faces.taglib.html_basic.OutputTextTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_h_005foutputText_005f5);
    try {
      _jspx_th_h_005foutputText_005f5.setPageContext(_jspx_page_context);
      _jspx_th_h_005foutputText_005f5.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_sakai_005fview_005f0);
      // /jsp/synoptic/wait.jsp(209,45) name = value type = javax.el.ValueExpression reqTime = false required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_h_005foutputText_005f5.setValue(new org.apache.jasper.el.JspValueExpression("/jsp/synoptic/wait.jsp(209,45) '#{msgs.syn_no_messages}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"#{msgs.syn_no_messages}",java.lang.Object.class)));
      _jspx_th_h_005foutputText_005f5.setJspId("jsp_1840271732_7");
      int _jspx_eval_h_005foutputText_005f5 = _jspx_th_h_005foutputText_005f5.doStartTag();
      if (_jspx_th_h_005foutputText_005f5.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_h_005foutputText_005f5, _jsp_getInstanceManager(), false);
    }
    return false;
  }

  private boolean _jspx_meth_h_005finputHidden_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_sakai_005fview_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  h:inputHidden
    com.sun.faces.taglib.html_basic.InputHiddenTag _jspx_th_h_005finputHidden_005f0 = new com.sun.faces.taglib.html_basic.InputHiddenTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_h_005finputHidden_005f0);
    try {
      _jspx_th_h_005finputHidden_005f0.setPageContext(_jspx_page_context);
      _jspx_th_h_005finputHidden_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_sakai_005fview_005f0);
      // /jsp/synoptic/wait.jsp(339,4) name = id type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_h_005finputHidden_005f0.setId("longPageLoad");
      // /jsp/synoptic/wait.jsp(339,4) name = value type = javax.el.ValueExpression reqTime = false required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_h_005finputHidden_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/jsp/synoptic/wait.jsp(339,4) 'synMainLite'",_jsp_getExpressionFactory().createValueExpression("synMainLite",java.lang.Object.class)));
      _jspx_th_h_005finputHidden_005f0.setJspId("jsp_1840271732_8");
      int _jspx_eval_h_005finputHidden_005f0 = _jspx_th_h_005finputHidden_005f0.doStartTag();
      if (_jspx_th_h_005finputHidden_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_h_005finputHidden_005f0, _jsp_getInstanceManager(), false);
    }
    return false;
  }

  private boolean _jspx_meth_f_005fverbatim_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_sakai_005fview_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  f:verbatim
    com.sun.faces.taglib.jsf_core.VerbatimTag _jspx_th_f_005fverbatim_005f0 = new com.sun.faces.taglib.jsf_core.VerbatimTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_f_005fverbatim_005f0);
    try {
      _jspx_th_f_005fverbatim_005f0.setPageContext(_jspx_page_context);
      _jspx_th_f_005fverbatim_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_sakai_005fview_005f0);
      _jspx_th_f_005fverbatim_005f0.setJspId("jsp_1840271732_9");
      int _jspx_eval_f_005fverbatim_005f0 = _jspx_th_f_005fverbatim_005f0.doStartTag();
      if (_jspx_eval_f_005fverbatim_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        if (_jspx_eval_f_005fverbatim_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_f_005fverbatim_005f0);
        }
        do {
          out.write("<div id=\"result\">");
          int evalDoAfterBody = _jspx_th_f_005fverbatim_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
        if (_jspx_eval_f_005fverbatim_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = _jspx_page_context.popBody();
        }
      }
      if (_jspx_th_f_005fverbatim_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_f_005fverbatim_005f0, _jsp_getInstanceManager(), false);
    }
    return false;
  }

  private boolean _jspx_meth_h_005foutputText_005f6(javax.servlet.jsp.tagext.JspTag _jspx_th_sakai_005fview_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  h:outputText
    com.sun.faces.taglib.html_basic.OutputTextTag _jspx_th_h_005foutputText_005f6 = new com.sun.faces.taglib.html_basic.OutputTextTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_h_005foutputText_005f6);
    try {
      _jspx_th_h_005foutputText_005f6.setPageContext(_jspx_page_context);
      _jspx_th_h_005foutputText_005f6.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_sakai_005fview_005f0);
      // /jsp/synoptic/wait.jsp(355,2) name = value type = javax.el.ValueExpression reqTime = false required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_h_005foutputText_005f6.setValue(new org.apache.jasper.el.JspValueExpression("/jsp/synoptic/wait.jsp(355,2) '#{mfSynopticBeanLite.disableMyWorkspaceDisabledMessage}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"#{mfSynopticBeanLite.disableMyWorkspaceDisabledMessage}",java.lang.Object.class)));
      _jspx_th_h_005foutputText_005f6.setJspId("jsp_1840271732_10");
      int _jspx_eval_h_005foutputText_005f6 = _jspx_th_h_005foutputText_005f6.doStartTag();
      if (_jspx_th_h_005foutputText_005f6.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_h_005foutputText_005f6, _jsp_getInstanceManager(), false);
    }
    return false;
  }

  private boolean _jspx_meth_h_005foutputText_005f7(javax.servlet.jsp.tagext.JspTag _jspx_th_sakai_005fview_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  h:outputText
    com.sun.faces.taglib.html_basic.OutputTextTag _jspx_th_h_005foutputText_005f7 = new com.sun.faces.taglib.html_basic.OutputTextTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_h_005foutputText_005f7);
    try {
      _jspx_th_h_005foutputText_005f7.setPageContext(_jspx_page_context);
      _jspx_th_h_005foutputText_005f7.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_sakai_005fview_005f0);
      // /jsp/synoptic/wait.jsp(359,2) name = value type = javax.el.ValueExpression reqTime = false required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_h_005foutputText_005f7.setValue(new org.apache.jasper.el.JspValueExpression("/jsp/synoptic/wait.jsp(359,2) '#{msgs.synopticToolDisabled}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"#{msgs.synopticToolDisabled}",java.lang.Object.class)));
      _jspx_th_h_005foutputText_005f7.setJspId("jsp_1840271732_11");
      int _jspx_eval_h_005foutputText_005f7 = _jspx_th_h_005foutputText_005f7.doStartTag();
      if (_jspx_th_h_005foutputText_005f7.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_h_005foutputText_005f7, _jsp_getInstanceManager(), false);
    }
    return false;
  }

  private boolean _jspx_meth_h_005fgraphicImage_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_sakai_005fview_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  h:graphicImage
    com.sun.faces.taglib.html_basic.GraphicImageTag _jspx_th_h_005fgraphicImage_005f0 = new com.sun.faces.taglib.html_basic.GraphicImageTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_h_005fgraphicImage_005f0);
    try {
      _jspx_th_h_005fgraphicImage_005f0.setPageContext(_jspx_page_context);
      _jspx_th_h_005fgraphicImage_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_sakai_005fview_005f0);
      // /jsp/synoptic/wait.jsp(366,0) name = url type = javax.el.ValueExpression reqTime = false required = false fragment = false deferredValue = true expectedTypeName = java.lang.String deferredMethod = false methodSignature = null
      _jspx_th_h_005fgraphicImage_005f0.setUrl(new org.apache.jasper.el.JspValueExpression("/jsp/synoptic/wait.jsp(366,0) '#{mfSynopticBeanLite.serverUrl}/library/image/silk/email.png'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"#{mfSynopticBeanLite.serverUrl}/library/image/silk/email.png",java.lang.String.class)));
      _jspx_th_h_005fgraphicImage_005f0.setJspId("jsp_1840271732_12");
      int _jspx_eval_h_005fgraphicImage_005f0 = _jspx_th_h_005fgraphicImage_005f0.doStartTag();
      if (_jspx_th_h_005fgraphicImage_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_h_005fgraphicImage_005f0, _jsp_getInstanceManager(), false);
    }
    return false;
  }

  private boolean _jspx_meth_h_005foutputText_005f8(javax.servlet.jsp.tagext.JspTag _jspx_th_sakai_005fview_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  h:outputText
    com.sun.faces.taglib.html_basic.OutputTextTag _jspx_th_h_005foutputText_005f8 = new com.sun.faces.taglib.html_basic.OutputTextTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_h_005foutputText_005f8);
    try {
      _jspx_th_h_005foutputText_005f8.setPageContext(_jspx_page_context);
      _jspx_th_h_005foutputText_005f8.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_sakai_005fview_005f0);
      // /jsp/synoptic/wait.jsp(367,36) name = value type = javax.el.ValueExpression reqTime = false required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_h_005foutputText_005f8.setValue(new org.apache.jasper.el.JspValueExpression("/jsp/synoptic/wait.jsp(367,36) '#{msgs.viewSynopticInfo}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"#{msgs.viewSynopticInfo}",java.lang.Object.class)));
      _jspx_th_h_005foutputText_005f8.setJspId("jsp_1840271732_13");
      int _jspx_eval_h_005foutputText_005f8 = _jspx_th_h_005foutputText_005f8.doStartTag();
      if (_jspx_th_h_005foutputText_005f8.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_h_005foutputText_005f8, _jsp_getInstanceManager(), false);
    }
    return false;
  }

  private boolean _jspx_meth_f_005fverbatim_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_sakai_005fview_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  f:verbatim
    com.sun.faces.taglib.jsf_core.VerbatimTag _jspx_th_f_005fverbatim_005f1 = new com.sun.faces.taglib.jsf_core.VerbatimTag();
    _jsp_getInstanceManager().newInstance(_jspx_th_f_005fverbatim_005f1);
    try {
      _jspx_th_f_005fverbatim_005f1.setPageContext(_jspx_page_context);
      _jspx_th_f_005fverbatim_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_sakai_005fview_005f0);
      _jspx_th_f_005fverbatim_005f1.setJspId("jsp_1840271732_14");
      int _jspx_eval_f_005fverbatim_005f1 = _jspx_th_f_005fverbatim_005f1.doStartTag();
      if (_jspx_eval_f_005fverbatim_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        if (_jspx_eval_f_005fverbatim_005f1 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_f_005fverbatim_005f1);
        }
        do {
          out.write("</div>");
          int evalDoAfterBody = _jspx_th_f_005fverbatim_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
        if (_jspx_eval_f_005fverbatim_005f1 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = _jspx_page_context.popBody();
        }
      }
      if (_jspx_th_f_005fverbatim_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_f_005fverbatim_005f1, _jsp_getInstanceManager(), false);
    }
    return false;
  }
}
